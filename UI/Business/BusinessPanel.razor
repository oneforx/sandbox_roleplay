@using System;
@using System.Collections.Generic;
@using System.Linq;
@using System.Text;
@using System.Threading.Tasks;
@using Sandbox.UI;
@using Sandbox;
@using Roleplay.Systems;
@using Roleplay.Models;

@attribute [StyleSheet]
@inherits Sandbox.UI.NavHostPanel

@namespace Roleplay.UI

<root>
    <div class="business-panel-sidebar">
        <div class="business-panel-sidebar-header">
            <button onclick="@(() => Navigate("/"))">Home</button>
            <button onclick="@(()=> Navigate("/businesses"))"><h1>Mes Business</h1></button>
        </div>
        <div class="business-panel-sidebar-nav">
            @if (CurrentUrl != "/" && CurrentUrl != "/businesses" && CurrentQuery != null)
            {
                <div onclick="@(() => Navigate("/business/members?"+CurrentQuery))">Membres</div>
                <div onclick="@(() => Navigate("/business/jobs?"+CurrentQuery))">Jobs</div>
                @if (CurrentQuery != null && ThisPerson.IsOwnerOf(Guid.Parse(Utils.Utils.GetQuery("id", CurrentQuery))))
                {
                    <div onclick="@(() => Navigate("/business/tasks?"+CurrentQuery))">Tasks</div>
                    <div onclick="@(() => Navigate("/business/tasks?"+CurrentQuery))">Account</div>
                }
            }
        </div>
    </div>
    <div class="navigator-canvas" slot="navigator-canvas"></div>
</root>

@code {
    public static bool Enabled = false;

    public Person ThisPerson => Database.Current.GetPersonBySteamId(Game.LocalClient.SteamId);

    public BusinessPanel()
    {
        DefaultUrl = "/";
        AddDestination("/", typeof(BusinessHomePanel));
        AddDestination("/businesses", typeof(BusinessListPanel));
        AddDestination("/business/home", typeof(BusinessIdHomePanel));
        AddDestination("/business/members", typeof(BusinessIdMembersPanel));
        AddDestination("/business/members/details", typeof(BusinessIdMembersPanel));
        AddDestination("/business/jobs", typeof(BusinessIdJobsPanel));
        AddDestination("/business/jobs/create", typeof(BusinessIdJobCreatePanel));
        AddDestination("/business/jobs/details", typeof(BusinessIdJobDetailsPanel));
        AddDestination("/business/tasks", typeof(BusinessIdTasksPanel));
        AddDestination("/business/tasks/details", typeof(BusinessIdTaskDetailsPanel));
        AddDestination("/business/tasks/create", typeof(BusinessIdTaskCreatePanel));
    }


    public override void Tick()
    {
        base.Tick();

        if(BusinessPanel.Enabled)
        {
            Parent.SetClass("openBusiness", true);
            SetClass("hidden", false);
        }
        else
        {
            Parent.SetClass("openBusiness", false);
            SetClass("hidden", true);
        }

    }

    protected override int BuildHash()
    {
        return HashCode.Combine(Database.Current.GetAllBusinessByPersonId(Database.Current.GetPersonBySteamId(Game.LocalClient.SteamId).Id).Count);
    }
}